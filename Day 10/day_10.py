# -*- coding: utf-8 -*-
"""Day 10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YDQ9-DQHeUJ4zwjujz7OY2tanGpVRLns
"""

#Output Function


def format_name(f_name, l_name):
  """example for docstring - Take a first and last name and format it
  to return the title case version of the name """
  formated_f_name = f_name.title()
  formated_l_name = l_name.title()
  return f"{formated_f_name} {formated_l_name}"


formatted_name = format_name("moshe", "morad")
length = len(formatted_name)

def format_name(f_name, l_name):
  if f_name == "" or l_name == "":
    return "You didn't provide valid inputs"
  formated_f_name = f_name.title()
  formated_l_name = l_name.title()
  return f"{formated_f_name} {formated_l_name}"


print(format_name("moshe", "morad"))

def function_1(text):
  return text + text


def function_2(text):
  return text.title()


output = function_2(function_1("hello"))
print(output)

#My Way
logo = """
 _____________________
|  _________________  |
| | Pythonista   0. | |  .----------------.  .----------------.  .----------------.  .----------------.
| |_________________| | | .--------------. || .--------------. || .--------------. || .--------------. |
|  ___ ___ ___   ___  | | |     ______   | || |      __      | || |   _____      | || |     ______   | |
| | 7 | 8 | 9 | | + | | | |   .' ___  |  | || |     /  \     | || |  |_   _|     | || |   .' ___  |  | |
| |___|___|___| |___| | | |  / .'   \_|  | || |    / /\ \    | || |    | |       | || |  / .'   \_|  | |
| | 4 | 5 | 6 | | - | | | |  | |         | || |   / ____ \   | || |    | |   _   | || |  | |         | |
| |___|___|___| |___| | | |  \ `.___.'\  | || | _/ /    \ \_ | || |   _| |__/ |  | || |  \ `.___.'\  | |
| | 1 | 2 | 3 | | x | | | |   `._____.'  | || ||____|  |____|| || |  |________|  | || |   `._____.'  | |
| |___|___|___| |___| | | |              | || |              | || |              | || |              | |
| | . | 0 | = | | / | | | '--------------' || '--------------' || '--------------' || '--------------' |
| |___|___|___| |___| |  '----------------'  '----------------'  '----------------'  '----------------'
|_____________________|
"""

def add(n1, n2):
  return n1 + n2

def subtract(n1, n2):
  return n1 - n2

def multiply(n1, n2):
  return n1 * n2

def divide(n1, n2):
  return n1 / n2

operations = {
    "+": add,
    "-": subtract,
    "*": multiply,
    "/": divide,
}

restart = True
print(logo)
while restart:
  number_1 = float(input("Enter your first number: "))
  for symbol in operations:
    print(symbol, end=" ,")
  selected_operation = input(f"enter your operation: ")
  number_2 = float(input("Enter your secound number: "))

  for operation in operations:
    if selected_operation == operation:
      calc = operations[selected_operation]
      result = calc(number_1, number_2)
      print(result)
      continue_with_result = ""
      continue_with_result = input("Do you want to continue with the result? 'Y' to continue 'N' to restart").lower()
      if continue_with_result == "y":
        number_1 = result
        for symbol in operations:
          print(symbol, end=" ,")
        selected_operation = input("enter your operation: ")
        number_2 = int(input("Enter your secound number: "))
        calc = operations[selected_operation]
        result = calc(number_1, number_2)
        # print(result)
        # continue_with_result = input("Do you want to continue with the result? 'yes' to continue 'no' to restart").lower()

#Course Way
logo = """
 _____________________
|  _________________  |
| | Pythonista   0. | |  .----------------.  .----------------.  .----------------.  .----------------.
| |_________________| | | .--------------. || .--------------. || .--------------. || .--------------. |
|  ___ ___ ___   ___  | | |     ______   | || |      __      | || |   _____      | || |     ______   | |
| | 7 | 8 | 9 | | + | | | |   .' ___  |  | || |     /  \     | || |  |_   _|     | || |   .' ___  |  | |
| |___|___|___| |___| | | |  / .'   \_|  | || |    / /\ \    | || |    | |       | || |  / .'   \_|  | |
| | 4 | 5 | 6 | | - | | | |  | |         | || |   / ____ \   | || |    | |   _   | || |  | |         | |
| |___|___|___| |___| | | |  \ `.___.'\  | || | _/ /    \ \_ | || |   _| |__/ |  | || |  \ `.___.'\  | |
| | 1 | 2 | 3 | | x | | | |   `._____.'  | || ||____|  |____|| || |  |________|  | || |   `._____.'  | |
| |___|___|___| |___| | | |              | || |              | || |              | || |              | |
| | . | 0 | = | | / | | | '--------------' || '--------------' || '--------------' || '--------------' |
| |___|___|___| |___| |  '----------------'  '----------------'  '----------------'  '----------------'
|_____________________|
"""

def add(n1, n2):
  return n1 + n2

def subtract(n1, n2):
  return n1 - n2

def multiply(n1, n2):
  return n1 * n2

def divide(n1, n2):
  return n1 / n2

operations = {
    "+": add,
    "-": subtract,
    "*": multiply,
    "/": divide,
}
# print(operations["*"](4, 8))

def calculator():
  should_accumulate = True
  num1 = float(input("What is the first number?: "))

  while should_accumulate:
    for symbol in operations:
      print(symbol)
    operation_symbol = input("Pick an operation: ")
    num2 = float(input("What is the next number?: "))
    answer = operations[operation_symbol](num1, num2)
    print(f"{num1} {operation_symbol} {num2} = {answer}")

    choice = input(f"Type 'y' to continue calculating with {answer}, or type 'n' to start a new calculation: ")
    if choice == "y":
      num1 = answer
    else:
      should_accumulate = False
      print("\n" * 20)
      calculator()

calculator()