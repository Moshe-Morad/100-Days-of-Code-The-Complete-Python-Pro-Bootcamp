# -*- coding: utf-8 -*-
"""Day 13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PgPTn7TysXrpVxbAb-04Q6TzuwbW7Qce
"""

# namespace example
# enemies = 1


def increase_enemies():
    enemies = 2
    print(f"enemies inside function: {enemies}")


# increase_enemies()
# print(f"enemies outside function: {enemies}")

# Local Scope
def drink_potion():
  #can't access "posion_strength outside the scope"
    potion_strength = 2
    print(potion_strength)


drink_potion()
# Can't access this potion_strength outside of its scope
# print(potion_strength)

# Global Scope
player_health = 10


def game():
    def drink_potion():
        potion_strength = 2
        print(f"inside the function {player_health}")

    drink_potion()

game()
print(player_health)

# Block Scope
game_level = 10
enemies = ["Skeleton", "Zombie", "Alien"]


def create_enemy():
    new_enemy = ""
    if game_level < 5:
        new_enemy = enemies[0]

    print(new_enemy)

# Modifying Global Scope

enemies = 1


# def increase_enemies():
    # Here we define that there is a global ver outside this scop and we want to use him insted creating new one inside the function
    # global enemies
    # enemies += 1
    # print(f"enemies inside function: {enemies}")
    # This is something we shouldn't do very often

# if we wand to modify the global scope and increse the nnumber of enemies we can do this much better and safer
def increase_enemies(enemy):
    print(f"enemies inside function: {enemy}")
    return enemy + 1

enemies = increase_enemies(enemies)

# increase_enemies()
print(f"enemies outside function: {enemies}")

